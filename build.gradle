plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

shadowJar {
    configurations = [project.configurations.shadow]
    exclude("META-INF")
    archiveFileName = "${project.archives_base_name}-${project.mod_version}-shadow.jar"
}

remapJar {
    // wait until the shadowJar is done
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    // Set the input jar for the task. Here use the shadow Jar that include the .class of the transitive dependency
    inputFile = file(shadowJar.archivePath)
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://jitpack.io' }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft( "com.mojang:minecraft:${project.minecraft_version}" )
    mappings( "net.fabricmc:yarn:${project.yarn_mappings}:v2" )
    modImplementation( "net.fabricmc:fabric-loader:${project.fabric_loader_version}" )

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation( "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}" )

    include(modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT'))
    modApi("maven.modrinth:luckperms:v${rootProject.luckperms_version}-fabric")

    annotationProcessor( modImplementation("io.wispforest:owo-lib:${project.owo_version}") )
    include( "io.wispforest:owo-sentinel:${project.owo_version}" )

    include( implementation( "com.github.JnCrMx:discord-game-sdk4j:0.5.5" ) )

    // New Discord integration
    shadow( api( "net.dv8tion:JDA:${rootProject.jda_version}") {
        exclude( module: "opus-java" )
    })

    // Banhammer integration
    modCompileOnly("maven.modrinth:banhammer:${rootProject.banhammer_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "owo_version", project.owo_version
    inputs.property "loader_version", project.fabric_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "owo_version": project.owo_version,
                "loader_version": project.fabric_loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}